package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math"
	"os"
)

type Trace struct {
	TraceArray []ObjTrace `json:"trace"`
}

type S3Class struct {
	name string
	storagePrice []float64
	getPrice float64
	postPrice float64
	retrievalPrice []float64
	retrievalData []float64
	days int
}

type ObjClass struct {
	className string
	days int
	daysCountingOntBill int
	BillingDays int
	cost float64
	size int
	getRequests float64
	postRequests float64
	retrievalRequests []float64

}
var classes = []S3Class {
	{name:"archive", storagePrice: []float64{0.00099}, getPrice: 0.0000004, postPrice: 0.00005, retrievalPrice: []float64{0,0.00010, 0.000025}, retrievalData: []float64{0, 0.02, 0.0025}, days: 180},
	{name:"glacier", storagePrice: []float64{0.004}, getPrice: 0.0000004, postPrice: 0.00005, retrievalPrice: []float64{0.01, 0.00005, 0.000025}, retrievalData: []float64{0.03, 0.01, 0.0025}, days: 90},
	{name:"infrequent access", storagePrice: []float64{0.0125}, getPrice: 0.001, postPrice: 0.01, retrievalData: []float64{0.01}, days: 30},
	{name:"standard", storagePrice: []float64{0.023, 0.022, 0.021}, getPrice: 0.0000004, postPrice: 0.000005, days: 30},

}

//corresponds to the trace of an S3 object
type ObjTrace struct {
	ObjSize   int `json:"objSize"`
	Requests map[int][]int `json:"requests"`
}

func main() {
	f, err := os.Create("/output_results")
	defer f.Close()
	w := bufio.NewWriter(f)

	fileName:= "/home/livia/easyTimesALot.json"
	jsonFile, err := os.Open(fileName)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println("Successfully Opened users.json")
	defer jsonFile.Close()

	byteValue, _ := ioutil.ReadAll(jsonFile)
	var traces Trace

	json.Unmarshal(byteValue, &traces)
	sizeEnd := 1000
	for trace:=range traces.TraceArray {
		fmt.Println(trace)
		t := ObjTrace{
			ObjSize:  6000,
			Requests: map[int][]int{1: []int{436000, 229000}, 2: []int{246000, 846000}, 3: []int{246000, 246000}, 4: []int{413000, 413000}, 5: []int{436000, 229000}, 6: []int{436000, 229000}, 7: []int{436000, 229000}, 8: []int{436000, 229000}, 9: []int{436000, 229000}, 10: []int{436000, 229000}, 11: []int{436000, 229000}, 12: []int{436000, 229000}, 13: []int{436000, 229000}, 14: []int{436000, 229000}, 15: []int{436000, 229000}, 16: []int{436000, 229000}, 17: []int{436000, 229000}, 18: []int{436000, 229000}, 19: []int{413000, 413000}, 20: []int{413000, 413000}, 21: []int{436000, 229000}, 22: []int{436000, 229000}, 23: []int{436000, 229000}, 24: []int{436000, 229000}, 25: []int{436000, 229000}, 26: []int{436000, 229000}, 27: []int{436000, 229000}, 28: []int{436000, 229000}, 29: []int{436000, 229000}, 30: []int{436000, 229000}, 31: []int{436000, 229000}, 32: []int{436000, 229000}, 33: []int{436000, 229000}, 34: []int{436000, 229000}, 35: []int{436000, 229000}, 36: []int{249000, 104000}, 37: []int{543000, 942000}, 38: []int{226000, 364000}, 39: []int{436000, 229000}, 40: []int{844000, 361000}, 41: []int{235000, 325000}, 42: []int{103000, 453000}, 43: []int{413000, 246000}, 44: []int{385000, 349000}, 45: []int{199000, 91000}, 46: []int{436000, 229000}, 47: []int{436000, 229000}, 48: []int{436000, 229000}, 49: []int{436000, 229000}, 50: []int{436000, 229000}, 51: []int{436000, 229000}, 52: []int{436000, 229000}, 53: []int{436000, 229000}, 54: []int{436000, 229000}, 55: []int{436000, 229000}, 56: []int{428000, 241000}, 57: []int{436000, 229000}, 58: []int{436000, 229000}, 59: []int{436000, 229000}, 60: []int{436000, 229000}, 61: []int{436000, 229000}, 62: []int{436000, 229000}, 63: []int{436000, 229000}, 64: []int{436000, 229000}, 65: []int{436000, 229000}, 66: []int{436000, 229000}, 67: []int{436000, 229000}, 68: []int{436000, 229000}, 69: []int{14000, 475000}, 70: []int{454000, 411000}, 71: []int{436000, 229000}, 72: []int{436000, 229000}, 73: []int{436000, 229000}, 74: []int{436000, 229000}, 75: []int{436000, 229000}, 76: []int{436000, 229000}, 77: []int{436000, 229000}, 78: []int{436000, 229000}, 79: []int{436000, 229000}, 80: []int{436000, 229000}, 81: []int{436000, 229000}, 82: []int{436000, 229000}, 83: []int{436000, 229000}, 84: []int{436000, 229000}, 85: []int{436000, 229000}, 86: []int{436000, 229000}, 87: []int{436000, 229000}, 88: []int{436000, 229000}, 89: []int{436000, 229000}, 90: []int{436000, 229000}, 91: []int{438000, 127000}, 92: []int{436000, 229000}, 93: []int{436000, 229000}, 94: []int{436000, 229000}, 95: []int{436000, 229000}, 96: []int{228000, 157000}, 97: []int{326000, 1480000}, 98: []int{395000, 313000}, 99: []int{434000, 220000}, 100: []int{436000, 229000}, 101: []int{436000, 229000}, 102: []int{436000, 229000}, 103: []int{436000, 229000}, 104: []int{436000, 229000}, 105: []int{436000, 229000}, 106: []int{436000, 229000}, 107: []int{436000, 229000}, 108: []int{436000, 229000}, 109: []int{436000, 229000}, 110: []int{436000, 229000}, 111: []int{436000, 229000}, 112: []int{436000, 229000}, 113: []int{436000, 229000}, 114: []int{436000, 229000}, 115: []int{436000, 229000}, 116: []int{436000, 229000}, 117: []int{436000, 229000}, 118: []int{436000, 229000}, 119: []int{436000, 229000}, 120: []int{436000, 229000}, 121: []int{436000, 229000}, 122: []int{436000, 229000}, 123: []int{436000, 229000}, 124: []int{436000, 229000}, 125: []int{436000, 229000}, 126: []int{436000, 229000}, 127: []int{436000, 229000}, 128: []int{436000, 229000}, 129: []int{436000, 229000}, 130: []int{436000, 229000}, 131: []int{436000, 229000}, 132: []int{436000, 229000}, 133: []int{436000, 229000}, 134: []int{436000, 229000}, 135: []int{436000, 229000}, 136: []int{436000, 229000}, 137: []int{436000, 229000}, 138: []int{436000, 229000}, 139: []int{436000, 229000}, 140: []int{436000, 229000}, 141: []int{436000, 229000}, 142: []int{436000, 229000}, 143: []int{436000, 229000}, 144: []int{436000, 229000}, 145: []int{436000, 229000}, 146: []int{436000, 229000}, 147: []int{436000, 229000}, 148: []int{436000, 229000}, 149: []int{436000, 229000}, 150: []int{436000, 229000}, 151: []int{436000, 229000}, 152: []int{436000, 229000}, 153: []int{436000, 229000}, 154: []int{436000, 229000}, 155: []int{436000, 229000}, 156: []int{436000, 229000}, 157: []int{436000, 229000}, 158: []int{436000, 229000}, 159: []int{436000, 229000}, 160: []int{436000, 229000}, 161: []int{436000, 229000}, 162: []int{436000, 229000}, 163: []int{436000, 229000}, 164: []int{436000, 229000}, 165: []int{436000, 229000}, 166: []int{436000, 229000}, 167: []int{114000, 421000}, 168: []int{436000, 229000}, 169: []int{436000, 229000}, 170: []int{436000, 229000}, 171: []int{436000, 229000}, 172: []int{436000, 229000}, 173: []int{436000, 229000}, 174: []int{436000, 229000}, 175: []int{436000, 229000}, 176: []int{436000, 229000}, 177: []int{436000, 229000}, 178: []int{436000, 229000}, 179: []int{436000, 229000}, 180: []int{436000, 229000}, 181: []int{436000, 229000}, 182: []int{436000, 229000}, 183: []int{436000, 229000}, 184: []int{436000, 229000}, 185: []int{436000, 229000}, 186: []int{436000, 229000}, 187: []int{436000, 229000}, 188: []int{436000, 229000}, 189: []int{436000, 229000}, 190: []int{436000, 229000}, 191: []int{436000, 229000}, 192: []int{436000, 229000}, 193: []int{436000, 229000}, 194: []int{965000, 806000}, 195: []int{294000, 444000}, 196: []int{480000, 47000}, 197: []int{436000, 229000}, 198: []int{467000, 398000}, 199: []int{436000, 229000}, 200: []int{436000, 229000}, 201: []int{436000, 229000}, 202: []int{436000, 229000}, 203: []int{436000, 229000}, 204: []int{436000, 229000}, 205: []int{255000, 187000}, 206: []int{170000, 463000}, 207: []int{436000, 229000}, 208: []int{436000, 229000}, 209: []int{436000, 229000}, 210: []int{436000, 229000}, 211: []int{436000, 229000}, 212: []int{436000, 229000}, 213: []int{465000, 364000}, 214: []int{152000, 884000}, 215: []int{577000, 323000}, 216: []int{377000, 468000}, 217: []int{436000, 229000}, 218: []int{436000, 229000}, 219: []int{436000, 229000}, 220: []int{436000, 229000}, 221: []int{436000, 229000}, 222: []int{436000, 229000}, 223: []int{436000, 229000}, 224: []int{436000, 229000}, 225: []int{436000, 229000}, 226: []int{436000, 229000}, 227: []int{436000, 229000}, 228: []int{436000, 229000}, 229: []int{436000, 229000}, 230: []int{436000, 229000}, 231: []int{436000, 229000}, 232: []int{436000, 229000}, 233: []int{436000, 229000}, 234: []int{436000, 229000}, 235: []int{436000, 229000}, 236: []int{436000, 229000}, 237: []int{436000, 229000}, 238: []int{436000, 229000}, 239: []int{436000, 229000}, 240: []int{436000, 229000}, 241: []int{436000, 229000}, 242: []int{436000, 229000}, 243: []int{436000, 229000}, 244: []int{388000, 454000}, 245: []int{248000, 728000}, 246: []int{436000, 229000}, 247: []int{436000, 229000}, 248: []int{436000, 229000}, 249: []int{436000, 229000}, 250: []int{436000, 229000}, 251: []int{436000, 229000}, 252: []int{436000, 229000}, 253: []int{436000, 229000}, 254: []int{436000, 229000}, 255: []int{436000, 229000}, 256: []int{436000, 229000}, 257: []int{436000, 229000}, 258: []int{436000, 229000}, 259: []int{436000, 229000}, 260: []int{436000, 229000}, 261: []int{436000, 229000}, 262: []int{436000, 229000}, 263: []int{436000, 229000}, 264: []int{436000, 229000}, 265: []int{436000, 229000}, 266: []int{436000, 229000}, 267: []int{436000, 229000}, 268: []int{265000, 608000}, 269: []int{146000, 216000}, 270: []int{716000, 497000}, 271: []int{436000, 229000}, 272: []int{436000, 229000}, 273: []int{436000, 229000}, 274: []int{436000, 229000}, 275: []int{436000, 229000}, 276: []int{436000, 229000}, 277: []int{436000, 229000}, 278: []int{436000, 229000}, 279: []int{436000, 229000}, 280: []int{436000, 229000}, 281: []int{436000, 229000}, 282: []int{436000, 229000}, 283: []int{436000, 229000}, 284: []int{436000, 229000}, 285: []int{436000, 229000}, 286: []int{436000, 229000}, 287: []int{436000, 229000}, 288: []int{436000, 229000}, 289: []int{436000, 229000}, 290: []int{436000, 229000}, 291: []int{436000, 229000}, 292: []int{436000, 229000}, 293: []int{436000, 229000}, 294: []int{436000, 229000}, 295: []int{436000, 229000}, 296: []int{436000, 229000}, 297: []int{436000, 229000}, 298: []int{436000, 229000}, 299: []int{436000, 229000}, 300: []int{436000, 229000}, 301: []int{436000, 229000}, 302: []int{436000, 229000}, 303: []int{436000, 229000}, 304: []int{436000, 229000}, 305: []int{436000, 229000}, 306: []int{436000, 229000}, 307: []int{436000, 229000}, 308: []int{436000, 229000}, 309: []int{436000, 229000}, 310: []int{436000, 229000}, 311: []int{436000, 229000}, 312: []int{436000, 229000}, 313: []int{436000, 229000}, 314: []int{436000, 229000}, 315: []int{436000, 229000}, 316: []int{436000, 229000}, 317: []int{436000, 229000}, 318: []int{436000, 229000}, 319: []int{436000, 229000}, 320: []int{436000, 229000}, 321: []int{275000, 385000}, 322: []int{411000, 104000}, 323: []int{436000, 229000}, 324: []int{436000, 229000}, 325: []int{436000, 229000}, 326: []int{436000, 229000}, 327: []int{436000, 229000}, 328: []int{436000, 229000}, 329: []int{304000, 499000}, 330: []int{436000, 229000}, 331: []int{436000, 229000}, 332: []int{436000, 229000}, 333: []int{436000, 229000}, 334: []int{436000, 229000}, 335: []int{436000, 229000}, 336: []int{436000, 229000}, 337: []int{436000, 229000}, 338: []int{436000, 229000}, 339: []int{436000, 229000}, 340: []int{436000, 229000}, 341: []int{436000, 229000}, 342: []int{436000, 229000}, 343: []int{436000, 229000}, 344: []int{436000, 229000}, 345: []int{436000, 229000}, 346: []int{436000, 229000}, 347: []int{436000, 229000}, 348: []int{436000, 229000}, 349: []int{496000, 407000}, 350: []int{436000, 229000}, 351: []int{436000, 229000}, 352: []int{436000, 229000}, 353: []int{436000, 229000}, 354: []int{436000, 229000}, 355: []int{436000, 229000}, 356: []int{436000, 229000}, 357: []int{436000, 229000}, 358: []int{206000, 401000}, 359: []int{436000, 229000}, 360: []int{396000, 455000}, 361: []int{156000, 651000}, 362: []int{436000, 229000}, 363: []int{436000, 229000}, 364: []int{436000, 229000}, 365: []int{436000, 229000}, 366: []int{436000, 229000}, 367: []int{436000, 229000}, 368: []int{436000, 229000}, 369: []int{436000, 229000}, 370: []int{436000, 229000}, 371: []int{436000, 229000}, 372: []int{436000, 229000}, 373: []int{14000, 151000}, 374: []int{190000, 129000}, 375: []int{436000, 229000}, 376: []int{436000, 229000}, 377: []int{436000, 229000}, 378: []int{436000, 229000}, 379: []int{436000, 229000}, 380: []int{436000, 229000}, 381: []int{178000, 366000}, 382: []int{381000, 207000}, 383: []int{436000, 229000}, 384: []int{436000, 229000}, 385: []int{436000, 229000}, 386: []int{436000, 229000}, 387: []int{436000, 229000}, 388: []int{436000, 229000}, 389: []int{436000, 229000}, 390: []int{436000, 229000}, 391: []int{436000, 229000}, 392: []int{436000, 229000}, 393: []int{436000, 229000}, 394: []int{436000, 229000}, 395: []int{436000, 229000}, 396: []int{436000, 229000}, 397: []int{436000, 229000}, 398: []int{436000, 229000}, 399: []int{436000, 229000}, 400: []int{436000, 229000}, 401: []int{436000, 229000}, 402: []int{436000, 229000}, 403: []int{436000, 229000}, 404: []int{436000, 229000}, 405: []int{436000, 229000}, 406: []int{436000, 229000}, 407: []int{436000, 229000}, 408: []int{436000, 229000}, 409: []int{436000, 229000}, 410: []int{436000, 229000}, 411: []int{188000, 265000}, 412: []int{280000, 429000}, 413: []int{442000, 225000}, 414: []int{446000, 302000}, 415: []int{436000, 229000}, 416: []int{436000, 229000}, 417: []int{436000, 229000}, 418: []int{436000, 229000}, 419: []int{436000, 229000}, 420: []int{436000, 229000}, 421: []int{436000, 229000}, 422: []int{436000, 229000}, 423: []int{436000, 229000}, 424: []int{436000, 229000}, 425: []int{436000, 229000}, 426: []int{436000, 229000}, 427: []int{436000, 229000}, 428: []int{436000, 229000}, 429: []int{436000, 229000}, 430: []int{436000, 229000}, 431: []int{436000, 229000}, 432: []int{436000, 229000}, 433: []int{436000, 229000}, 434: []int{436000, 229000}, 435: []int{436000, 229000}, 436: []int{436000, 229000}, 437: []int{436000, 229000}, 438: []int{436000, 229000}, 439: []int{436000, 229000}, 440: []int{436000, 229000}, 441: []int{436000, 229000}, 442: []int{436000, 229000}, 443: []int{436000, 229000}, 444: []int{436000, 229000}, 445: []int{436000, 229000}, 446: []int{436000, 229000}, 447: []int{436000, 229000}, 448: []int{436000, 229000}, 449: []int{436000, 229000}, 450: []int{436000, 229000}, 451: []int{436000, 229000}, 452: []int{436000, 229000}, 453: []int{436000, 229000}, 454: []int{436000, 229000}, 455: []int{436000, 229000}, 456: []int{118000, 473000}, 457: []int{185000, 476000}, 458: []int{436000, 229000}, 459: []int{436000, 229000}, 460: []int{468000, 316000}, 461: []int{56000, 442000}, 462: []int{272000, 211000}, 463: []int{401000, 127000}, 464: []int{436000, 229000}, 465: []int{97000, 202000}, 466: []int{581000, 232000}, 467: []int{855000, 336000}, 468: []int{347000, 329000}, 469: []int{436000, 229000}, 470: []int{436000, 229000}, 471: []int{436000, 229000}, 472: []int{436000, 229000}, 473: []int{436000, 229000}, 474: []int{436000, 229000}, 475: []int{436000, 229000}, 476: []int{436000, 229000}, 477: []int{436000, 229000}, 478: []int{436000, 229000}, 479: []int{436000, 229000}, 480: []int{436000, 229000}, 481: []int{436000, 229000}, 482: []int{436000, 229000}, 483: []int{436000, 229000}, 484: []int{436000, 229000}, 485: []int{436000, 229000}, 486: []int{436000, 229000}, 487: []int{436000, 229000}, 488: []int{436000, 229000}, 489: []int{436000, 229000}, 490: []int{436000, 229000}, 491: []int{436000, 229000}, 492: []int{436000, 229000}, 493: []int{436000, 229000}, 494: []int{436000, 229000}, 495: []int{436000, 229000}, 496: []int{436000, 229000}, 497: []int{436000, 229000}, 498: []int{436000, 229000}, 499: []int{436000, 229000}, 500: []int{436000, 229000}, 501: []int{436000, 229000}, 502: []int{436000, 229000}, 503: []int{436000, 229000}, 504: []int{436000, 229000}, 505: []int{436000, 229000}, 506: []int{436000, 229000}, 507: []int{436000, 229000}, 508: []int{436000, 229000}, 509: []int{436000, 229000}, 510: []int{436000, 229000}, 511: []int{436000, 229000}, 512: []int{436000, 229000}, 513: []int{436000, 229000}, 514: []int{436000, 229000}, 515: []int{436000, 229000}, 516: []int{436000, 229000}, 517: []int{436000, 229000}, 518: []int{436000, 229000}, 519: []int{436000, 229000}, 520: []int{436000, 229000}, 521: []int{436000, 229000}, 522: []int{436000, 229000}, 523: []int{436000, 229000}, 524: []int{436000, 229000}, 525: []int{221000, 123000}, 526: []int{436000, 229000}, 527: []int{436000, 229000}, 528: []int{436000, 229000}, 529: []int{436000, 229000}, 530: []int{436000, 229000}, 531: []int{436000, 229000}, 532: []int{436000, 229000}, 533: []int{436000, 229000}, 534: []int{436000, 229000}, 535: []int{436000, 229000}, 536: []int{436000, 229000}, 537: []int{436000, 229000}, 538: []int{436000, 229000}, 539: []int{436000, 229000}, 540: []int{436000, 229000}, 541: []int{436000, 229000}, 542: []int{436000, 229000}, 543: []int{436000, 229000}, 544: []int{436000, 229000}, 545: []int{436000, 229000}, 546: []int{436000, 229000}, 547: []int{436000, 229000}, 548: []int{436000, 229000}, 549: []int{436000, 229000}, 550: []int{436000, 229000}, 551: []int{436000, 229000}, 552: []int{436000, 229000}, 553: []int{436000, 229000}, 554: []int{436000, 229000}, 555: []int{436000, 229000}, 556: []int{479000, 299000}, 557: []int{217000, 407000}, 558: []int{407000, 414000}, 559: []int{258000, 194000}, 560: []int{82000, 465000}, 561: []int{400000, 275000}, 562: []int{436000, 229000}, 563: []int{436000, 229000}, 564: []int{436000, 229000}, 565: []int{436000, 229000}, 566: []int{436000, 229000}, 567: []int{436000, 229000}, 568: []int{436000, 229000}, 569: []int{436000, 229000}, 570: []int{436000, 229000}, 571: []int{436000, 229000}, 572: []int{436000, 229000}, 573: []int{465000, 312000}, 574: []int{212000, 67000}, 575: []int{237000, 319000}, 576: []int{230000, 109000}, 577: []int{436000, 229000}, 578: []int{436000, 229000}, 579: []int{436000, 229000}, 580: []int{436000, 229000}, 581: []int{436000, 229000}, 582: []int{436000, 229000}, 583: []int{436000, 229000}, 584: []int{436000, 229000}, 585: []int{436000, 229000}, 586: []int{436000, 229000}, 587: []int{436000, 229000}, 588: []int{436000, 229000}, 589: []int{436000, 229000}, 590: []int{436000, 229000}, 591: []int{436000, 229000}, 592: []int{436000, 229000}, 593: []int{436000, 229000}, 594: []int{436000, 229000}, 595: []int{436000, 229000}, 596: []int{436000, 229000}, 597: []int{436000, 229000}, 598: []int{436000, 229000}, 599: []int{436000, 229000}, 600: []int{393000, 286000}, 601: []int{247000, 194000}, 602: []int{358000, 337000}, 603: []int{245000, 431000}, 604: []int{436000, 229000}, 605: []int{436000, 229000}, 606: []int{436000, 229000}, 607: []int{436000, 229000}, 608: []int{436000, 229000}, 609: []int{436000, 229000}, 610: []int{436000, 229000}, 611: []int{436000, 229000}, 612: []int{436000, 229000}, 613: []int{436000, 229000}, 614: []int{436000, 229000}, 615: []int{436000, 229000}, 616: []int{436000, 229000}, 617: []int{436000, 229000}, 618: []int{436000, 229000}, 619: []int{436000, 229000}, 620: []int{436000, 229000}, 621: []int{436000, 229000}, 622: []int{436000, 229000}, 623: []int{436000, 229000}, 624: []int{436000, 229000}, 625: []int{414000, 439000}, 626: []int{436000, 229000}, 627: []int{436000, 229000}, 628: []int{436000, 229000}, 629: []int{436000, 229000}, 630: []int{436000, 229000}, 631: []int{436000, 229000}, 632: []int{436000, 229000}, 633: []int{436000, 229000}, 634: []int{436000, 229000}, 635: []int{436000, 229000}, 636: []int{297000, 362000}, 637: []int{436000, 229000}, 638: []int{436000, 229000}, 639: []int{436000, 229000}, 640: []int{436000, 229000}, 641: []int{436000, 229000}, 642: []int{436000, 229000}, 643: []int{436000, 229000}, 644: []int{436000, 229000}, 645: []int{436000, 229000}, 646: []int{436000, 229000}, 647: []int{436000, 229000}, 648: []int{436000, 229000}, 649: []int{436000, 229000}, 650: []int{436000, 229000}, 651: []int{436000, 229000}, 652: []int{183000, 235000}, 653: []int{367000, 281000}, 654: []int{24000, 419000}, 655: []int{436000, 229000}, 656: []int{436000, 229000}, 657: []int{436000, 229000}, 658: []int{436000, 229000}, 659: []int{356000, 211000}, 660: []int{86000, 159000}, 661: []int{417000, 222000}, 662: []int{436000, 229000}, 663: []int{436000, 229000}, 664: []int{436000, 229000}, 665: []int{436000, 229000}, 666: []int{436000, 229000}, 667: []int{491000, 402000}, 668: []int{128000, 199000}, 669: []int{975000, 366000}, 670: []int{436000, 229000}, 671: []int{436000, 229000}, 672: []int{436000, 229000}, 673: []int{436000, 229000}, 674: []int{436000, 229000}, 675: []int{436000, 229000}, 676: []int{436000, 229000}, 677: []int{436000, 229000}, 678: []int{436000, 229000}, 679: []int{436000, 229000}, 680: []int{436000, 229000}, 681: []int{436000, 229000}, 682: []int{436000, 229000}, 683: []int{436000, 229000}, 684: []int{436000, 229000}, 685: []int{436000, 229000}, 686: []int{436000, 229000}, 687: []int{436000, 229000}, 688: []int{454000, 446000}, 689: []int{290000, 117000}, 690: []int{192000, 332000}, 691: []int{118000, 274000}, 692: []int{436000, 229000}, 693: []int{436000, 229000}, 694: []int{436000, 229000}, 695: []int{436000, 229000}, 696: []int{436000, 229000}, 697: []int{436000, 229000}, 698: []int{436000, 229000}, 699: []int{436000, 229000}, 700: []int{436000, 229000}, 701: []int{436000, 229000}, 702: []int{436000, 229000}, 703: []int{436000, 229000}, 704: []int{436000, 229000}, 705: []int{436000, 229000}, 706: []int{436000, 229000}, 707: []int{436000, 229000}, 708: []int{436000, 229000}, 709: []int{436000, 229000}, 710: []int{436000, 229000}, 711: []int{436000, 229000}, 712: []int{436000, 229000}, 713: []int{436000, 229000}, 714: []int{436000, 229000}, 715: []int{436000, 229000}, 716: []int{436000, 229000}, 717: []int{436000, 229000}, 718: []int{347000, 335000}, 719: []int{251000, 322000}, 720: []int{36000, 88000}, 721: []int{94000, 136000}, 722: []int{436000, 229000}, 723: []int{436000, 229000}, 724: []int{436000, 229000}, 725: []int{436000, 229000}, 726: []int{436000, 229000}, 727: []int{436000, 229000}, 728: []int{436000, 229000}, 729: []int{436000, 229000}, 730: []int{436000, 229000}, 731: []int{436000, 229000}, 732: []int{436000, 229000}, 733: []int{436000, 229000}, 734: []int{436000, 229000}, 735: []int{436000, 229000}, 736: []int{371000, 457000}, 737: []int{176000, 183000}, 738: []int{192000, 486000}, 739: []int{256000, 158000}, 740: []int{436000, 229000}, 741: []int{436000, 229000}, 742: []int{436000, 229000}, 743: []int{436000, 229000}, 744: []int{436000, 229000}, 745: []int{436000, 229000}, 746: []int{436000, 229000}, 747: []int{436000, 229000}, 748: []int{435000, 20000}, 749: []int{114000, 225000}, 750: []int{457000, 10000}, 751: []int{436000, 229000}, 752: []int{436000, 229000}, 753: []int{436000, 229000}, 754: []int{436000, 229000}, 755: []int{952000, 889000}, 756: []int{11000, 432000}, 757: []int{436000, 229000}, 758: []int{436000, 229000}, 759: []int{436000, 229000}, 760: []int{427000, 468000}, 761: []int{173000, 119000}, 762: []int{263000, 286000}, 763: []int{436000, 229000}, 764: []int{436000, 229000}, 765: []int{436000, 229000}, 766: []int{436000, 229000}, 767: []int{436000, 229000}, 768: []int{436000, 229000}, 769: []int{436000, 229000}, 770: []int{436000, 229000}, 771: []int{436000, 229000}, 772: []int{436000, 229000}, 773: []int{436000, 229000}, 774: []int{436000, 229000}, 775: []int{436000, 229000}, 776: []int{436000, 229000}, 777: []int{142000, 288000}, 778: []int{436000, 229000}, 779: []int{436000, 229000}, 780: []int{436000, 229000}, 781: []int{436000, 229000}, 782: []int{423000, 379000}, 783: []int{436000, 229000}, 784: []int{436000, 229000}, 785: []int{436000, 229000}, 786: []int{436000, 229000}, 787: []int{436000, 229000}, 788: []int{436000, 229000}, 789: []int{436000, 229000}, 790: []int{436000, 229000}, 791: []int{436000, 229000}, 792: []int{436000, 229000}, 793: []int{468000, 324000}, 794: []int{436000, 229000}, 795: []int{436000, 229000}, 796: []int{436000, 229000}, 797: []int{436000, 229000}, 798: []int{436000, 229000}, 799: []int{436000, 229000}, 800: []int{257000, 524000}, 801: []int{371000, 276000}, 802: []int{492000, 485000}, 803: []int{421000, 298000}, 804: []int{436000, 229000}, 805: []int{186000, 68000}, 806: []int{846000, 267000}, 807: []int{449000, 356000}, 808: []int{436000, 229000}, 809: []int{436000, 229000}, 810: []int{436000, 229000}, 811: []int{436000, 229000}, 812: []int{436000, 229000}, 813: []int{436000, 229000}, 814: []int{436000, 229000}, 815: []int{436000, 229000}, 816: []int{436000, 229000}, 817: []int{436000, 229000}, 818: []int{436000, 229000}, 819: []int{436000, 229000}, 820: []int{436000, 229000}, 821: []int{436000, 229000}, 822: []int{436000, 229000}, 823: []int{436000, 229000}, 824: []int{436000, 229000}, 825: []int{436000, 229000}, 826: []int{436000, 229000}, 827: []int{436000, 229000}, 828: []int{436000, 229000}, 829: []int{436000, 229000}, 830: []int{436000, 229000}, 831: []int{436000, 229000}, 832: []int{436000, 229000}, 833: []int{436000, 229000}, 834: []int{436000, 229000}, 835: []int{436000, 229000}, 836: []int{436000, 229000}, 837: []int{436000, 229000}, 838: []int{436000, 229000}, 839: []int{436000, 229000}, 840: []int{436000, 229000}, 841: []int{436000, 229000}, 842: []int{436000, 229000}, 843: []int{436000, 229000}, 844: []int{436000, 229000}, 845: []int{436000, 229000}, 846: []int{436000, 229000}, 847: []int{436000, 229000}, 848: []int{436000, 229000}, 849: []int{436000, 229000}, 850: []int{436000, 229000}, 851: []int{436000, 229000}, 852: []int{904000, 396000}, 853: []int{252000, 422000}, 854: []int{436000, 229000}, 855: []int{436000, 229000}, 856: []int{436000, 229000}, 857: []int{436000, 229000}, 858: []int{436000, 229000}, 859: []int{436000, 229000}, 860: []int{436000, 229000}, 861: []int{436000, 229000}, 862: []int{436000, 229000}, 863: []int{436000, 229000}, 864: []int{436000, 229000}, 865: []int{436000, 229000}, 866: []int{436000, 229000}, 867: []int{436000, 229000}, 868: []int{436000, 229000}, 869: []int{232000, 404000}, 870: []int{198000, 909000}, 871: []int{176000, 356000}, 872: []int{436000, 229000}, 873: []int{436000, 229000}, 874: []int{436000, 229000}, 875: []int{436000, 229000}, 876: []int{285000, 396000}, 877: []int{436000, 229000}, 878: []int{436000, 229000}, 879: []int{436000, 229000}, 880: []int{436000, 229000}, 881: []int{436000, 229000}, 882: []int{436000, 229000}, 883: []int{436000, 229000}, 884: []int{436000, 229000}, 885: []int{436000, 229000}, 886: []int{436000, 229000}, 887: []int{436000, 229000}, 888: []int{436000, 229000}, 889: []int{436000, 229000}, 890: []int{436000, 229000}, 891: []int{436000, 229000}, 892: []int{436000, 229000}, 893: []int{436000, 229000}, 894: []int{436000, 229000}, 895: []int{436000, 229000}, 896: []int{436000, 229000}, 897: []int{163000, 936000}, 898: []int{436000, 229000}, 899: []int{436000, 229000}, 900: []int{436000, 229000}, 901: []int{436000, 229000}, 902: []int{436000, 229000}, 903: []int{436000, 229000}, 904: []int{436000, 229000}, 905: []int{436000, 229000}, 906: []int{436000, 229000}, 907: []int{436000, 229000}, 908: []int{21100000, 25700000}, 909: []int{436000, 229000}, 910: []int{436000, 229000}, 911: []int{436000, 229000}, 912: []int{436000, 229000}, 913: []int{436000, 229000}, 914: []int{436000, 229000}, 915: []int{436000, 229000}, 916: []int{44100000, 40600000}, 917: []int{436000, 229000}, 918: []int{436000, 229000}, 919: []int{436000, 229000}, 920: []int{436000, 229000}, 921: []int{436000, 229000}, 922: []int{436000, 229000}, 923: []int{436000, 229000}, 924: []int{436000, 229000}, 925: []int{436000, 229000}, 926: []int{436000, 229000}, 927: []int{436000, 229000}, 928: []int{436000, 229000}, 929: []int{436000, 229000}, 930: []int{436000, 229000}, 931: []int{436000, 229000}, 932: []int{436000, 229000}, 933: []int{436000, 229000}, 934: []int{436000, 229000}, 935: []int{436000, 229000}, 936: []int{436000, 229000}, 937: []int{436000, 229000}, 938: []int{436000, 229000}, 939: []int{436000, 229000}, 940: []int{436000, 229000}, 941: []int{436000, 229000}, 942: []int{436000, 229000}, 943: []int{436000, 229000}, 944: []int{436000, 229000}, 945: []int{436000, 229000}, 946: []int{21500000, 15800000}, 947: []int{35200000, 356000}, 948: []int{436000, 229000}, 949: []int{436000, 229000}, 950: []int{436000, 229000}, 951: []int{436000, 229000}, 952: []int{436000, 229000}, 953: []int{436000, 229000}, 954: []int{436000, 229000}, 955: []int{436000, 229000}, 956: []int{436000, 229000}, 957: []int{436000, 229000}, 958: []int{436000, 229000}, 959: []int{436000, 229000}, 960: []int{436000, 229000}, 961: []int{436000, 229000}, 962: []int{436000, 229000}, 963: []int{436000, 229000}, 964: []int{436000, 229000}, 965: []int{436000, 229000}, 966: []int{436000, 229000}, 967: []int{436000, 229000}, 968: []int{436000, 229000}, 969: []int{436000, 229000}, 970: []int{436000, 229000}, 971: []int{23300000, 28100000}, 972: []int{436000, 229000}, 973: []int{436000, 229000}, 974: []int{436000, 229000}, 975: []int{436000, 229000}, 976: []int{436000, 229000}, 977: []int{436000, 229000}, 978: []int{436000, 229000}, 979: []int{436000, 229000}, 980: []int{436000, 229000}, 981: []int{436000, 229000}, 982: []int{436000, 229000}, 983: []int{436000, 229000}, 984: []int{436000, 229000}, 985: []int{436000, 229000}, 986: []int{436000, 229000}, 987: []int{436000, 229000}, 988: []int{436000, 229000}, 989: []int{436000, 229000}, 990: []int{436000, 229000}, 991: []int{436000, 229000}, 992: []int{436000, 229000}, 993: []int{436000, 229000}, 994: []int{436000, 229000}, 995: []int{436000, 229000}, 996: []int{436000, 229000}, 997: []int{436000, 229000}, 998: []int{436000, 229000}, 999: []int{436000, 229000}, 1000: []int{436000, 229000}},
		}
		fmt.Println("dasda")
		dynamicClassing := treeMerge(sizeEnd, 550, t)
		totalCost := 0.0
		for _, elem := range dynamicClassing {
			fmt.Println("Class name: ", elem.className, " Total days: ", elem.days, " Cost: ", elem.cost)
			totalCost += elem.cost
		}
		fmt.Println("Total Cost for Dynamic Classes: ", totalCost)

		tiering := calculateTiering(t)
		tieringCost := 0.0
		for _, elem := range tiering {
			fmt.Println("Class name: ", elem.className, " Total days: ", elem.days, " Cost: ", elem.cost)
			tieringCost += elem.cost
		}
		fmt.Println("Total Cost for Intelligent Tiering: ", tieringCost)

		fmt.Fprintf(w, "%d\n", tieringCost, totalCost)
	}
}

func calculateTiering (traceArray ObjTrace) []ObjClass {
	daysCounter := 0
	costObjects := []ObjClass{{ className: "standard", size: traceArray.ObjSize}}
	currentObj := 0
	for i:= 0; i < len(traceArray.Requests); i++ {
		req := traceArray.Requests[i+1]
		costObjects[currentObj].days += 1
		costObjects[currentObj].BillingDays += 1
		costObjects[currentObj].daysCountingOntBill += 1
		if req[0] != 0 || req[1] != 0 {

			costObjects[currentObj].getRequests += float64(req[0])
			costObjects[currentObj].postRequests += float64(req[1])

			if costObjects[currentObj].className != "standard"{
				costObjects = append(costObjects, ObjClass{className: "standard", size: traceArray.ObjSize, days: 1})
				currentObj += 1
			}
			daysCounter = 0
		} else {
			daysCounter += 1
			if daysCounter >= 30 && costObjects[currentObj].className != "archive" {

				newClass := ""
				if costObjects[currentObj].className == "standard" {
					newClass = "infrequent access"
				} else if costObjects[currentObj].className == "infrequent access" { newClass = "glacier"
				} else if costObjects[currentObj].className == "glacier" { newClass = "archive" }
				currentObj += 1
				daysCounter = 0
				costObjects = append(costObjects, ObjClass{className: newClass, size: traceArray.ObjSize, retrievalRequests: []float64{0, 0, 0}})
			}
		}
	}

	for i, obj := range costObjects{
		var previousObj ObjClass
		if i > 0 {
			previousObj = costObjects[i-1]

		}
		costObjects[i].cost += calculateObjCostForClass(getClass(obj.className), obj, previousObj)
	}
	return costObjects
}

func treeMerge(lastWindowDay int, windowSize int, traceArray ObjTrace) []ObjClass{
	currentDay := 1
	currentObject := calculate(currentDay, currentDay + windowSize, traceArray, ObjClass{})
	currentDay += windowSize
	costObjects := []ObjClass{currentObject}
	for true {
		if currentDay <= lastWindowDay {

			currentObject = calculate(currentDay, int(math.Min(float64(currentDay+windowSize), float64(lastWindowDay))), traceArray, currentObject)
			costObjects = append(costObjects, currentObject)
		} else { break }
		currentDay += windowSize
	}
	return costObjects
}
func getClass(className string) S3Class {
	for _, class := range classes {
		if class.name == className {
			return class
		}
	}
	return S3Class{}
}


func calculate(firstDay int, lastDay int, trace ObjTrace, previousClass ObjClass) ObjClass {

	postInInterval, getInInterval, retrievesInInterval := sumRequests(firstDay, lastDay, trace)

	prices := []float64{-0.1, -0.1, -0.1, -0.1}
	finalClass := ObjClass{size: trace.ObjSize, getRequests: getInInterval, postRequests: postInInterval, retrievalRequests: retrievesInInterval, days: lastDay - firstDay, daysCountingOntBill: lastDay - firstDay}
	for i, class := range classes {
		prices[i] = calculateObjCostForClass(class, finalClass, previousClass) // fazer ajutes do data retrieve para infrequent accesd
	}

	className, minPrice := FindMin(prices)
	finalClass.className = className
	finalClass.cost = minPrice

	if className == previousClass.className {
		finalClass.BillingDays = previousClass.BillingDays + finalClass.days
		classDays := getClass(className).days
		if previousClass.BillingDays <  classDays{
			finalClass.daysCountingOntBill = int(math.Max(0, float64(previousClass.BillingDays + finalClass.days-classDays)))
		}
	} else {
		finalClass.BillingDays = finalClass.days
	}
	return finalClass
}

func sumRequests(firstDay int, lastDay int, trace ObjTrace) (float64, float64, []float64) {
	postInInterval, getInInterval, retrievesInInterval := 0.0, 0.0, []float64{0.0, 0.0, 0.0}

	for day := firstDay; day <= lastDay; day++ {
		totalRequests, ok := trace.Requests[day]
		if ok {
			getInInterval += float64(totalRequests[0])
			postInInterval += float64(totalRequests[1])
			if totalRequests[0] + totalRequests[1] > 0 {
				if day == 1 {
					retrievesInInterval[0] += 1.0 // expedite
				} else if day == 2 {
					retrievesInInterval[1] += 1.0 // standard
				} else {
					retrievesInInterval[2] += 1.0 // bulk
				}
			}

		}
	}
	return postInInterval, getInInterval, retrievesInInterval
}

func calculateObjCostForClass(class S3Class, object ObjClass, previousObject ObjClass) float64 {
	storage := 0.0
	if previousObject.className != class.name || previousObject.BillingDays >= getClass(previousObject.className).days{
		storage = storagePriceCalculate(class, object)
	}

	retrievalPrice := 0.0 // for glacier classes only
	// adjust for ia class
	if class.name == "glacier" {
		retrievalPrice = object.retrievalRequests[0] * class.retrievalPrice[0] + object.retrievalRequests[1]*class.retrievalPrice[1] + object.retrievalRequests[2]*class.retrievalPrice[2]

	} else if class.name == "archive" { // there's no expedite option for s3 glacier deep archive
		if object.retrievalRequests[0] == 0 {
			retrievalPrice = object.retrievalRequests[1]*class.retrievalPrice[1] + object.retrievalRequests[2]*class.retrievalPrice[2]
		} else {
			retrievalPrice = math.MaxFloat64
		}
	} else if class.name == "infrequent access" {
		retrievalPrice = (object.retrievalRequests[0] + object.retrievalRequests[1] + object.retrievalRequests[2])*class.retrievalData[0] * float64(object.size)
	}

	if (class.name == "glacier" || class.name == "archive") && retrievalPrice != 0 {
		for i, req := range object.retrievalRequests{
			if req != 0 {
				retrievalPrice += float64(object.size) * class.retrievalData[i] * object.retrievalRequests[i]
			}
		}
	}
	requests := class.postPrice * object.postRequests + class.getPrice * object.getRequests + retrievalPrice
	return storage + requests
}

func storagePriceCalculate(class S3Class, object ObjClass) float64 {
	storage := 0.0
	days := math.Ceil(float64(object.days)/float64(30))
	if class.name == "standard" {
		if days < 1{
			days = 1
		}
		firstClass := 50000.0
		secondClass := 450000.0
		thirdClass := 500000.0
		storage = class.storagePrice[0] * math.Min(float64(object.size), firstClass) // price for the first 50TB
		if float64(object.size) > 50000 {
			storage += class.storagePrice[1] * math.Min(float64(object.size) - firstClass, secondClass) // price for the next 450TB
		}
		if float64(object.size) > 500000 {
			storage += class.storagePrice[2] * math.Min(float64(object.size) - thirdClass, thirdClass) // price for over 500TB
		}
		storage *= days
	} else if class.name == "glacier" {
		if days < 3{
			days = 3
		}
		storage = days * class.storagePrice[0] * float64(object.size) // since storagePrice consider 30 day and the minimum billing is 90
	} else if class.name == "archive" {
		if days < 6{
			days = 6
		}
		storage = days * class.storagePrice[0] * float64(object.size) // since storagePrice consider 30 day and the minimum billing is 180
	}	else {
		if days < 1{
			days = 1
		}
		storage = class.storagePrice[0] * float64(object.size) * days
	}
	return storage
}

func FindMin(prices []float64) (name string, min float64) {
	min = prices[0]
	name = "archive"
	for i, price := range prices {
		if price < min {
			min = price
			name = classes[i].name
		}
	}
	return
}
func RemoveIndex(s [][][]int, index int) [][][]int {

	if len(s) == 0  {
		return nil
	}
	if len(s) - 1 <= index {
		return s[:index]
	}
	if index == 0 {
		return s[index+1:]
	}
	return append(s[:index], s[index+1:]...)
}
